# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Definicja {
  id: ID!
  opis: String
  poziom: Int
  negatywna: Boolean
  aspekt: Aspekt
}

input DefinicjaWhereUniqueInput {
  id: ID
}

input DefinicjaWhereInput {
  AND: [DefinicjaWhereInput!]
  OR: [DefinicjaWhereInput!]
  NOT: [DefinicjaWhereInput!]
  id: IDFilter
  opis: StringFilter
  poziom: IntNullableFilter
  negatywna: BooleanFilter
  aspekt: AspektWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DefinicjaOrderByInput {
  id: OrderDirection
  opis: OrderDirection
  poziom: OrderDirection
  negatywna: OrderDirection
}

input DefinicjaUpdateInput {
  opis: String
  poziom: Int
  negatywna: Boolean
  aspekt: AspektRelateToOneForUpdateInput
}

input AspektRelateToOneForUpdateInput {
  create: AspektCreateInput
  connect: AspektWhereUniqueInput
  disconnect: Boolean
}

input DefinicjaUpdateArgs {
  where: DefinicjaWhereUniqueInput!
  data: DefinicjaUpdateInput!
}

input DefinicjaCreateInput {
  opis: String
  poziom: Int
  negatywna: Boolean
  aspekt: AspektRelateToOneForCreateInput
}

input AspektRelateToOneForCreateInput {
  create: AspektCreateInput
  connect: AspektWhereUniqueInput
}

type Aspekt {
  id: ID!
  nazwa: String
  definicje(where: DefinicjaWhereInput! = {}, orderBy: [DefinicjaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DefinicjaWhereUniqueInput): [Definicja!]
  definicjeCount(where: DefinicjaWhereInput! = {}): Int
}

input AspektWhereUniqueInput {
  id: ID
}

input AspektWhereInput {
  AND: [AspektWhereInput!]
  OR: [AspektWhereInput!]
  NOT: [AspektWhereInput!]
  id: IDFilter
  nazwa: StringFilter
  definicje: DefinicjaManyRelationFilter
}

input DefinicjaManyRelationFilter {
  every: DefinicjaWhereInput
  some: DefinicjaWhereInput
  none: DefinicjaWhereInput
}

input AspektOrderByInput {
  id: OrderDirection
  nazwa: OrderDirection
}

input AspektUpdateInput {
  nazwa: String
  definicje: DefinicjaRelateToManyForUpdateInput
}

input DefinicjaRelateToManyForUpdateInput {
  disconnect: [DefinicjaWhereUniqueInput!]
  set: [DefinicjaWhereUniqueInput!]
  create: [DefinicjaCreateInput!]
  connect: [DefinicjaWhereUniqueInput!]
}

input AspektUpdateArgs {
  where: AspektWhereUniqueInput!
  data: AspektUpdateInput!
}

input AspektCreateInput {
  nazwa: String
  definicje: DefinicjaRelateToManyForCreateInput
}

input DefinicjaRelateToManyForCreateInput {
  create: [DefinicjaCreateInput!]
  connect: [DefinicjaWhereUniqueInput!]
}

type Kompetecja {
  id: ID!
  nazwa: String
  metodyka: String
  aspekty(where: AspektWhereInput! = {}, orderBy: [AspektOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AspektWhereUniqueInput): [Aspekt!]
  aspektyCount(where: AspektWhereInput! = {}): Int
}

input KompetecjaWhereUniqueInput {
  id: ID
}

input KompetecjaWhereInput {
  AND: [KompetecjaWhereInput!]
  OR: [KompetecjaWhereInput!]
  NOT: [KompetecjaWhereInput!]
  id: IDFilter
  nazwa: StringFilter
  metodyka: StringNullableFilter
  aspekty: AspektManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input AspektManyRelationFilter {
  every: AspektWhereInput
  some: AspektWhereInput
  none: AspektWhereInput
}

input KompetecjaOrderByInput {
  id: OrderDirection
  nazwa: OrderDirection
  metodyka: OrderDirection
}

input KompetecjaUpdateInput {
  nazwa: String
  metodyka: String
  aspekty: AspektRelateToManyForUpdateInput
}

input AspektRelateToManyForUpdateInput {
  disconnect: [AspektWhereUniqueInput!]
  set: [AspektWhereUniqueInput!]
  create: [AspektCreateInput!]
  connect: [AspektWhereUniqueInput!]
}

input KompetecjaUpdateArgs {
  where: KompetecjaWhereUniqueInput!
  data: KompetecjaUpdateInput!
}

input KompetecjaCreateInput {
  nazwa: String
  metodyka: String
  aspekty: AspektRelateToManyForCreateInput
}

input AspektRelateToManyForCreateInput {
  create: [AspektCreateInput!]
  connect: [AspektWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createDefinicja(data: DefinicjaCreateInput!): Definicja
  createDefinicjas(data: [DefinicjaCreateInput!]!): [Definicja]
  updateDefinicja(where: DefinicjaWhereUniqueInput!, data: DefinicjaUpdateInput!): Definicja
  updateDefinicjas(data: [DefinicjaUpdateArgs!]!): [Definicja]
  deleteDefinicja(where: DefinicjaWhereUniqueInput!): Definicja
  deleteDefinicjas(where: [DefinicjaWhereUniqueInput!]!): [Definicja]
  createAspekt(data: AspektCreateInput!): Aspekt
  createAspekts(data: [AspektCreateInput!]!): [Aspekt]
  updateAspekt(where: AspektWhereUniqueInput!, data: AspektUpdateInput!): Aspekt
  updateAspekts(data: [AspektUpdateArgs!]!): [Aspekt]
  deleteAspekt(where: AspektWhereUniqueInput!): Aspekt
  deleteAspekts(where: [AspektWhereUniqueInput!]!): [Aspekt]
  createKompetecja(data: KompetecjaCreateInput!): Kompetecja
  createKompetecjas(data: [KompetecjaCreateInput!]!): [Kompetecja]
  updateKompetecja(where: KompetecjaWhereUniqueInput!, data: KompetecjaUpdateInput!): Kompetecja
  updateKompetecjas(data: [KompetecjaUpdateArgs!]!): [Kompetecja]
  deleteKompetecja(where: KompetecjaWhereUniqueInput!): Kompetecja
  deleteKompetecjas(where: [KompetecjaWhereUniqueInput!]!): [Kompetecja]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  definicja(where: DefinicjaWhereUniqueInput!): Definicja
  definicjas(where: DefinicjaWhereInput! = {}, orderBy: [DefinicjaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DefinicjaWhereUniqueInput): [Definicja!]
  definicjasCount(where: DefinicjaWhereInput! = {}): Int
  aspekt(where: AspektWhereUniqueInput!): Aspekt
  aspekts(where: AspektWhereInput! = {}, orderBy: [AspektOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AspektWhereUniqueInput): [Aspekt!]
  aspektsCount(where: AspektWhereInput! = {}): Int
  kompetecja(where: KompetecjaWhereUniqueInput!): Kompetecja
  kompetecjas(where: KompetecjaWhereInput! = {}, orderBy: [KompetecjaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KompetecjaWhereUniqueInput): [Kompetecja!]
  kompetecjasCount(where: KompetecjaWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
